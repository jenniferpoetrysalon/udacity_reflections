Q1: When would you want to use a remote repository rather than keeping all your work local?
A1: Using a remote repository immediately presents changes and could, in near real time, show a team, for example, a fix, change or evolution.  

Q2: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A1: Pulling manually rather than automatically ensures that my local and individual changes don't negatively effect a team's work.  Also, pulling manually provides greater control and awareness of which versions are "published" on the remote branches.

Q3: Describe the differences between forks, clones, and branches. When would you use one instead of another?
A1: Branches allow the creation of different versions of a project, for example, having a slow and fast mode in a game.  Cloning allows for a local version to be pushed to a remote location and for a remote location to be pulled to a local location (repository).  Forks automatically clone a master branch into your github and allow you to use, manipulate, and add to files on your own 'master' or origin.

Q4: What is the benefit of having a copy of the last known state of the remote stored locally?
A1: The state of the remote copy stored locally allows you to compare your work with the state of the remote.  This enables git diff, git log, etc.

Q5: How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
A1: Tracking version, changes and commenting on these changes would be harder to collaborate without GitHub.  I suppose devising your own system would allow you to choose terminology that seems more fitting and natural making it easier than learning the theory and associated vocabulary invented by Git.

